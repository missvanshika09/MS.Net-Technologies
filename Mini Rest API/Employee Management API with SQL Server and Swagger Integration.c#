Download Dependencies:=

From Tools->NuGet Package Manager->Package Manager Console


Install-Package Microsoft.EntityFrameworkCore
Install-Package Microsoft.EntityFrameworkCore.SqlServer
Install-Package Microsoft.EntityFrameworkCore.Tools
Install-Package Microsoft.EntityFrameworkCore.Design



Inside Models Folder:=

//Employee.cs
// Employee.cs: Defines the Employee model with properties like Id, Name, Email, and Department.


namespace Api_Crud.Models
{
    public class Employee
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Email { get; set; }
        public string? Department { get; set; }

    }
}


Inside Repository Folder:=
// Appdbcontext.cs: Configures the database context and connects to the SQL Server.


using System.Collections.Generic;
using Api_Crud.Models;
using Microsoft.EntityFrameworkCore;
namespace WebApplication1.Models
{
    public class Appdbcontext : DbContext
    {

        public Appdbcontext(DbContextOptions<Appdbcontext> options)
                 : base(options)
        {
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=(localdb)\ProjectModels;Initial Catalog=DemoData;Integrated Security=True");
            }
        }
        public DbSet<Employee> Employees { get; set; }
    }

}


Inside Services Folder:=


//IEmployeeRepository.cs
// IEmployeeRepository.cs: Interface for defining CRUD operations on Employee data.


using Api_Crud.Models;
using Microsoft.AspNetCore.Mvc;

namespace WebApplication1.Models
{
    public interface IEmployeeRepository
    {
        Task<ActionResult<Employee>?> GetEmployee(int Id);
        Task<ActionResult<IEnumerable<Employee>>> GetAllEmployee();
        Task<ActionResult<Employee>> Add(Employee employee);
        Task<Employee> Update(int id, Employee employeeChanges);
        Task<Employee> Delete(int Id);

        //Task<Employee> PutEmployee(int Id);

        //Task<Employee> PostEmployee(int Id);

    }

}

// SQLEmployeeRepository.cs: Implements IEmployeeRepository for accessing and manipulating Employee data.

//SQLEmployeeRepository.cs


using Api_Crud.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebApplication1.Models;

namespace Api_Curd_sql.Repos
{
    public class SQLEmployeeRepository : IEmployeeRepository
    {
        private readonly Appdbcontext context;

        public SQLEmployeeRepository(Appdbcontext context)
        {
            this.context = context;
        }

        public async Task<ActionResult<Employee>> Add(Employee employee)
        {
            context.Employees.Add(employee);
            await context.SaveChangesAsync();
            return employee;

        }

        public async Task<Employee> Delete(int Id)
        {
            Employee employee = context.Employees.Find(Id);
            if (employee != null)
            {
                context.Employees.Remove(employee);
                await context.SaveChangesAsync();
            }
            return employee;

        }

        //public Task<ActionResult<Employee>> Add(Employee employee)
        //{
        //    throw new NotImplementedException();
        //}

        //public Task<Employee> Delete(int Id)
        //{
        //    throw new NotImplementedException();
        //}

        public async Task<ActionResult<IEnumerable<Employee>?>> GetAllEmployee()
        {
            if (context.Employees == null)
            {
                return null;
            }
            return await context.Employees.ToListAsync();

        }

        public async Task<ActionResult<Employee>?> GetEmployee(int Id)
        {
            if (context.Employees == null)
            {
                return null;
            }
            var employee = await context.Employees.FindAsync(Id);

            if (employee == null)
            {
                return null;
            }

            return employee;

        }

        public async Task<Employee> Update(int id, Employee employeeChanges)
        {
            if (id != employeeChanges.Id)
            {
                return null;
            }

            context.Entry(employeeChanges).State = EntityState.Modified;

            try
            {
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!EmployeeExists(id))
                {
                    return null;
                }
                else
                {
                    throw;
                }
            }
            return null;

        }
        private bool EmployeeExists(int id)
        {
            return (context.Employees?.Any(e => e.Id == id)).GetValueOrDefault();
        }


        //public Task<Employee> Update(int id, Employee employeeChanges)
        //{
        //    throw new NotImplementedException();
        //}
    }
}


Inside Controllers Folder:=

// EmployeeController.cs: Implements RESTful API endpoints for CRUD operations on Employee data.
// Endpoints:
// - GET    /api/Employee       : Get all employees.
// - GET    /api/Employee/{id}  : Get a specific employee by ID.
// - POST   /api/Employee       : Add a new employee.
// - PUT    /api/Employee/{id}  : Update an existing employee.
// - DELETE /api/Employee/{id}  : Delete an employee.

//EmployeeController.cs


using Api_Crud.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebApplication1.Models;

namespace Api_Crud.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeeController : ControllerBase
    {

        private readonly IEmployeeRepository _repository;

        public EmployeeController(IEmployeeRepository repository)
        {
            _repository = repository;

        }
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Employee>?>> GetEmployees()
        {
            if (await _repository.GetAllEmployee() == null)
            {
                return NotFound();
            }

            return await _repository.GetAllEmployee();
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<Employee>> Get_Employee(int id)
        {
            var employee = await _repository.GetEmployee(id);
            return employee == null ? NotFound() : employee;
        }
        [HttpPut("{id}")]
        public async Task<IActionResult> PutEmployee(int id, Employee employee)
        {
            if (id != employee.Id)
            {
                return BadRequest();
            }
            try
            {
                await _repository.Update(id, employee);
            }
            catch (DbUpdateConcurrencyException)
            {
                if (_repository.GetEmployee(id) == null)
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
            return NoContent();
        }
        [HttpPost]
        public async Task<ActionResult<Employee>> PostEmployee(Employee employee)
        {
            await _repository.Add(employee);
            return CreatedAtAction("PostEmployee", new { id = employee.Id }, employee);
        }
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteEmployee(int id)
        {
            await _repository.Delete(id);
            return NoContent();
        }

    }
}

Inside Appsettings.json :=
// appsettings.json: Configures the SQL Server connection string.


{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {
    "EmployeeDBConnection": "Data Source=(localdb)\\ProjectModels;Initial Catalog=DemoData;Integrated Security=True"
  },

  "AllowedHosts": "*"
}


Inside Program.cs :=
// Program.cs: Configures services for the application, including:
// - Dependency Injection for the repository pattern.
// - SQL Server connection via Entity Framework Core.
// - Swagger/OpenAPI for API testing and documentation.
// - CORS policy for cross-origin resource sharing.


using Api_Curd_sql.Repos;
using Microsoft.EntityFrameworkCore;
using WebApplication1.Models;

namespace Api_Crud
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            builder.Services.AddControllers();
            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen();
            builder.Services.AddScoped<IEmployeeRepository, SQLEmployeeRepository>();
            builder.Services.AddDbContext<Appdbcontext>(option => option.UseSqlServer(builder.Configuration.GetConnectionString("EmployeeDBConnection")));
            builder.Services.AddCors(options =>
            {
                options.AddPolicy("MyAllowSpecificOrigins",
                                  builder =>
                                  {
                                      builder.WithOrigins("http://127.0.0.1:5500").AllowAnyHeader().AllowAnyMethod();
                                  });
            });
            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }

            app.UseHttpsRedirection();

            app.UseAuthorization();
            app.UseCors("MyAllowSpecificOrigins");

            app.MapControllers();

            app.Run();
        }
    }
}

